


Hashing is a technique using which a search operation can be performed in O(1) time complexity.

Data is viewed as a dictionary,  pairs of keys and data values.

Ex: 

Key could be Emp id, data values could be the employee record.

Key could be Employee name, data values could be the employee record.

Better example would be Sysbol table used during compilation, where the key is 
the symbol name, data value could be the type and address info.


Emp ids:     00---->99 

Number of pairs is 17.   
Worst case linear search will take 17 operations.

----------------------------------------------------------------
63  23  72  11  8  15  54  39  46  3  49  57  33  62  74  20  80 
A   B   C   D   E  F   G   H   I   J  K   L   M   N   O   P   Q 
----------------------------------------------------------------
0   1   2   3   4  5   6   7   8   9  10  11  12  13  14  15  16 



Hash Table
----------   

A hash table, an array, with b buckets is used to 
store the dictionary pairs. 

Each bucket has s slots. Usually s is one but in 
the below example 2. 

Index into the hash table for a key is given by a 
hash function h(k).


h(k) = k / b

       b = 10, is the number of buckets.

       s =2, number of slots per bucket.


0        8 E     3 J

1        11 D    15 F     

2        23 B    20 P    

3        39 H    33 M

4        46 I    49 K   

5        54 G    57 L 

6        63 A    62 N

7        72 C    74 O
  
8        80 Q  

9      




Better distribution of the keys to the buckets with modulus.

h(k) = k % b

       b = 10, is the number of buckets.
----------------------------------------------------------------
63  23  72  11  8  15  54  39  46  7  49  57  55  62  74  20  88 
A   B   C   D   E  F   G   H   I   J  K   L   M   N   O   P   Q 
----------------------------------------------------------------

0   20 P

1   11 D 

2   72 C    62 N

3   63 A    23 B 

4   54 G    74 O

5   15 F    55 M 

6   46 I  

7   7  J     57 L   

8   8  E     88 Q 

9   39 H     49 K  


  
Uniform hash functions: 
For a random key k  from the key space, if the probbaility that 

h(k) == i  is  1/b for 0<=i<b,  then the hash function h(k) is said to be uniform.

In theory both h(k) = k/b and h(k) = k%b  are uniform. 

Since, the max key(id) used above is 88, bucket with index 9 is never used for division.
 

Densities:
----------
Number of pairs:17

Total possibles keys : 100

Key density:    Number of pairs / Total possibles keys

                17/100

Load Density  :  Number of pairs  / Number of buckets * s

                 17 / 10 * 2

                 0.85 
 
Collision:
              If for two different keys k1 and k2, h(k1) == h(k2) 
              then there is a collisons. 


Overflow:     If the home bucket of a new key is full 
              at the time of key insertion.

1) Open addressing
    
  Search for a bucket that has free space
  to store the new key using the following:

  bucket index = ( h(k) + i ) % b   

                       0<= i <= b-1   
  

    Average search comparisons is given by 

        ( 2 -ld)  / ( 2 - 2 ld)  

    In the example above 

        ( 2 - 0.85) / ( 2 - 2 * 0.85) 

             =  3.83333

    Worst case is O(n).

2) Chaining
   Make each bucket to be list, tree or any other data 
   structure of unlimited entries.    

   The hash table entries are pointers to the first
   node in the corresponding data structure.

   To search for key k, compute h(k) and search in the
   data structure pointed at by the hash table entry
   with index h(k).
   
   Linked list implementation:

0-->   20 P  

1-->   11 D 

2-->   72 C  --->  62 N

3-->   63 A  --->  23 B   ---> 73 U

4-->   54 G  --->  74 O

5-->   15 F  --->  55 M   ---> 65 T

6-->   46 I  

7-->    7 J  --->  57 L   ---> 37 S

8-->    8 E  --->  88 Q 

9-->   39 H  --->  49 K  ---> 19 R


   Load density,now , is defined to be

        ld = n/b
   
   Observe, we do not fix the number of slots per bucket.

   Average number of operations for search is given by   

        1 + ld/2 

        1 + (n /b) /2 
 
    Involves the term n  and is not O(1). 

    Average slightly more than ld/2. 

    Guess work says ld/2. 

    Reason: For 3,13,23,33,43,53,63,73,83,93
    most require three comparisons. 

    Worst case is O(n).




Hash Functions:
--------------

1) Modulo(Division)

h(k) = k % b


Number of buckets b.
     a) If b is even seems to have bias as 
        odd keys are mapped to odd buckets and 
        even keys to even buckets. 

        In applications, keys have biases to be 
        even or odd. So these biases are carried 
        over to the buckets.

        If b is odd, keys are fairly distributed 
        across the buckets.  

     b) If b has small prime factors there seems 
        to be biased distribution.
        Factors like 2,3,5,7,11,

        Observation is that if there no prime factor 
        less than 20, it is fairly uniform.

        In general selecting b to be prime larger 
        than 20 seems to give best distribution.


2) Middle square
 
Take r central bits from the square of the key. 



3) Folding

Fold the key at fixed size partitions.
Involves reversing of odd numbered partitions and adding up all the paritions.

4) Strings mapped to int keys..
   
   a) Add up each of the characters of a the string.
   b) Treat the string as sequence of two byte 
      shorts and add them up. 


Increasing the Table size
-------------------------

If the "noticed" performance is low OR if the Load Density is beyond 0.75 then the hash table size should be increased.


Load Density : Number of pairs  / Number of buckets * s

                 17 / 10 * 2

                 0.85 

Entire table needs to be re hashed using the 
new number of buckets.

With large number of entries, this may require 
a lot of time and during this time the hash 
will not the available. 

Dynamic Hashing:
-----------------

Increases the hash table by one bucket at a time. 


Without Using Directories:
--------------------------

Assuming the modulo hash function


h(k) = k % m

       m = b,the number of buckets equal to 10.


Add one more bucket and split the first bucket
and modify the hash function as 

b = 11, m = 10

--------------------------------------
               k % 2m  if h(k) <=0
g(k) =   
               h(k)    else
--------------------------------------


        0 10 20 30  40 50 60 70 

h(k)    0  0  0  0   0  0  0  0 
      
g(k)    0 10  0 10   0 10  0 10   
------------------------------------

        1  11  21  31  41  51 61 ....

h(k)    1   1   1   1   1   1  1 

g(k)    1   1   1   1   1   1  1 
------------------------------------

        2  12  22  32  42  52 62 ....

h(k)    2   2   2   2   2   2  2 

g(k)    2   2   2   2   2   2  2 
------------------------------------

                                    NEW
0        20 P    40 Q               10)       N 10 

1        11 D                     

2        62 N

3        63 A    23 B    

4        74 C    54 G   

5        15 F

6        46 I

7        27 L

8        8  E

9        39 H    49 K 



Adding One more bucket:
----------------------

b = 12, m = 10


--------------------------------------
               k % 2m  if h(k) <=1
g(k) =   
               h(k)    else
--------------------------------------


        0 10 20 30  40 50 60 70 

h(k)    0  0  0  0   0  0  0  0 
      
g(k)    0 10 0  10  0  10 0  10   
------------------------------------

        1  11  21  31  41  51 61 ....

h(k)    1   1   1   1   1   1  1 

g(k)    1  11   1  11   1  11  1 
------------------------------------

        2  12  22  32  42  52 62 ....

h(k)    2   2   2   2   2   2  2 

g(k)    2   2   2   2   2   2  2 
------------------------------------------------



To split a bucket for key k given at h(k),

start splitting buckets one by one starting
with bucket index 0,1,.....,h(k)




   
Using Directories:
------------------

Lets say the keys takes the form 

A0,A1,A2,...B0,B1,B2,...C0,C1,C2,....

and the hash function maps 

A  100       1   001
B  101       2   010
C  110       3   011
D  111       4   100

Hash function h(k):

A0          100 000     h(A1,2) = 01
A1          100 001     h(A1,4) = 0001    
A2          100 010     h(A3,2) = 11
A3          100 011     h(A3,4) = 0011
A4          100 100
A5          100 101

B0          101 000      h(B1,2) = 01
B1          101 001      h(B1,4) = 1001            
B2          101 010      h(B3,2) = 11
B3          101 011      h(B3,4) = 1011
B4          101 100
B5          101 101

C0          110 000
C1          110 001         
C2          110 010
C3          110 011
C4          110 100
C5          110 101



Assume the keys in the hash are
A0, B0, A1, B1, C2 and C3

Using h(k,2) as an index into a directory:

Directory

00---------------->A0,B0
01---------------->A1,B1
10---------------->C2
11---------------->C3


To insert C5, h(C5,2) = 01 and the entry for 01
in the directory is full. 

The diretory size needs to be increased.

First select a number u such that h(k,u) is not
the same for all the entries. 
At least for one entry the value should differ.

h(A1,3)  = 001
h(B1,3)  = 001
h(C5,3)  = 101


Since, u = 3, the directory will have 2^3 entries.
Double the number from 2^2.

0 00---------------->A0,B0
       |
0 01---|------------>A1,B1
       |  |
0 10---|--|--------->C2
       |  |  | 
0 11---|--|--|------>C3
       |  |  |   |
       |  |  |   |
1 00---   |  |   |
          |  |   |
1 01------   |   |
             |   |
1 10---------    |
                 |
1 11-------------


Then the index h(C5,3) = 101 is altered 
to point to new bucket.

0 00---------------->A0,B0
       |
0 01---|------------>A1,B1
       |   
0 10---|------------>C2
       |     | 
0 11---|-----|------>C3
       |     |   |
       |     |   |
1 00---      |   |
             |   |
1 01---------------->C5
             |   |
1 10---------    |
                 |
1 11-------------




Final Hash and Directory

0 00---------------->A0,B0
0 01---------------->A1,B1
0 10---------------->C2
0 11---------------->C3
1 00                 
1 01---------------->C5
1 10                   
1 11                

Inserting C1:

h(C1,3) = 001

but h(A1,3) and h(B1,3) are also 001.

h(A1)  100 001     h(A1,4)   0 001
h(B1)  101 001     h(B1,4)   1 001
h(C1)  110 001     h(C1,4)   0 001

h(k,4) is required to be used as an 
index into the directory and the directory 
will have 2 ^ 4 entries

Doubling the directory entries. 

0 0 00---------------->A0,B0
0 0 01---------------->A1,B1
0 0 10---------------->C2
0 0 11---------------->C3
0 1 00---------------->Same as 0 0 00       
0 1 01---------------->C5
0 1 10---------------->Same as 0 0 10 
0 1 11---------------->Same as 0 0 11 

1 0 00---------------->Same as 0 0 00
1 0 01---------------->Same as 0 0 01
1 0 10---------------->Same as 0 0 10
1 0 11---------------->Same as 0 0 11
1 1 00---------------->Same as 0 1 00
1 1 01---------------->Same as 0 1 01  Has C5
1 1 10---------------->Same as 0 1 10 
1 1 11---------------->Same as 0 1 11


Now change B1 to go to 1 001 slot from 0 001

h(A1)  100 001     h(A1,4)   0 001
h(B1)  101 001     h(B1,4)   1 001
h(C1)  110 001     h(C1,4)   0 001

0 0 00---------------->A0,B0
0 0 01---------------->A1,C1
0 0 10---------------->C2
0 0 11---------------->C3
0 1 00---------------->Same as 0 0 00       
0 1 01---------------->C5
0 1 10---------------->Same as 0 0 10 
0 1 11---------------->Same as 0 0 11 

1 0 00---------------->Same as 0 0 00
1 0 01----------------> B1 
1 0 10---------------->Same as 0 0 10
1 0 11---------------->Same as 0 0 11
1 1 00---------------->Same as 0 1 00
1 1 01---------------->Same as 0 1 01  Has C5
1 1 10---------------->Same as 0 1 10 
1 1 11---------------->Same as 0 1 11

Now Insert A4....
