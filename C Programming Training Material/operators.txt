

                 *  X  +  Y   
[]

  X [  Y  ]   =  * ( X  +   Y  ) 
                 * ( Y  +  X  ) 
                  Y [ X ]

int A[10] = { 10, 20, 30 , 40 , 50 } ;
   
   A[1]  = * ( A + 1 ) 
           * ( 1 + A ) 
             1 [ A ] 
    A [ i ] =   * ( A + i ) 
                 * ( i  + A ) 
                       i [A]
-------------------------------------------------
int i=10; 
int * ip = &i; 

ip [ 0 ]  = * ( ip + 0 ) 
            * ip                ==    i; 

ip[1]  ----> unpredictable, could segmentation fault; 
ip[-1]  ----> unpredictable, could segmentation fault; 
-----------------------------------------------------

char * cp = "hello world" ; 


*( cp + 1 )   == cp [ 1 ] ----------------> %c with printf

* (cp + i)    == cp [ i ] ------------>   %c with printf 

i=0,1,...11

int A[10];

ip = A + 4;


ip[-2] =   *( ip +    -2 )   gives the thrid int in A. 


--------------------------------------------------------------
  "hello"[3]   ----- l  ---%c printf....
     ptr[3]   and ptr points to h .....
     * ( ptr + 3) 
     
  3["hello"]   ----- l  ---%c printf....

   X[Y]  is defined as    *(X + Y ) 
    
   * ( 3 + "hello") 

    learn: *( 4 + "hello"  )----- %c printf   
           *( "hello" + 4 )  ---- %c printf 
---------------------------------------------------------------
int A[10]          * ( A + 10)  ;??????
int 10[A] ;   // Not allowed  

  3 [A] == A[3] 



---------------------------------------------------
Numerical conversions, automatic:
     7/3     
     7 + 3   
     7.0 + 3 
  float f = 4.56; 
          (int) f + 3   
     (int) 7.0 + 3 
     7.0 + 3.0   

     int i = 3.4/2.0 ; 

     float f = 7/3 ; 


     3.4/2.0 ; 
-------------------------------------------------------



Logical and bitwise negation:
Logical : 

!   4    ==   0 
!   -4   ==   0

!   0    ==   1

Bitwise : Assume  8 bit unsigned integer type 


x = 8  /*  00001000   */ 

~ x    =   11110111   /* should be 247 */

!  x   ==  0
    
x = 255;

!  x    ==  0
                         Special case when ~x == ! x 
~  x    ==   0 

char * cp = "hello"



! cp   =  0

cp = NULL;

! cp   = 1


---------------------------------------------------------

Bitwise : Assume  8 bit unsigned integer type


x =    /*  00111011   */
y =    /*  01010110   */

x & y  /*  00010010   */
x | y  /*  01111111   */
x ^ y  /*  01101101   */



10 && 11  == 1
10 && 0   == 0
0  && 10  == 0
0  && 0   == 0 

10.5 && 11.5 == 1

10 || 11  == 1
10 || 0   == 1
0  || 10  == 1
0  || 0   == 0 

10.5 || 11.5 == 1



cp = "hello"
cp && 10   ==  1
10 && cp   == 1
cp = NULL;
cp && 10   == 0

cp = "hello"
cp || 10   ==  1
10 || cp   == 1
cp = NULL;
cp || 10   == 1
cp || 0    == 0

----------------------------------------------------------------


sizeof() ..... objects OR types 

int i ;  sizeof( int) OR sizeof( i) 

int i = 10; 
                    
   printf("%d", sizeof( i++)); 
   printf("%d", i); 

   printf("%d", sizeof( ++i)); 
   printf("%d", i); 

   printf("%d", sizeof( i=100)); 
   printf("%d", i); 


            sizeof(x+y) 

char * cp = NULL;

printf("%c\n", *cp   );    // segmentation fault!


printf("%d\n", sizeof(*cp)     );    //  NOOO    segmentation fault!

  char * cp ="NULL";
  char * cp1 = NULL;



--------------------------------------------------------

X >> Y  is X shifted to the right by Y positions
X << Y  is X shifted to the left  by Y positions



unsigned int i = 1, j = 2, k=0;

k = i << j ; 

k == 4
 
i   value?????

k = i + j ; 


i+=j; 

i=1;
i<<=j; 

i=1;
i|=j;

i=1;
i&=j;


---------------------------------------------------------


Assoicativity:
 
3/4*5 -----  (3/4) * 5

3 * 4 /5----  ( 3 * 4 ) / 5


LR
  3 * 4 * 5 * 6 
  ( ( 3* 4) * 5 ) * 6 

  3 / 4 / 5 / 6 
  ( ( 3/ 4) / 5 ) / 6 

x = y = z = 3 ; 
LR

((x=y)=z)=3

RL
            x
x = ( y = ( z = 3 ) )
           ------
x = ( y =     3     ) 
    -----------------
x =           3 


     3 * 4 * 5
     (3 * 4)  * 5  * 56

  x = y = z = 4
  x = ( y  = (z = 4) )

 int A[]= { 10,20,30,40};  int * ip = A;

 *ip++  ---------> * ( ip ++)  ----> 10  AND ip ---> 20

ip = A;

  ++*ip    ----> ++( *ip ) ------> 11  AND ip ----> 11

ip = A;

  *++ip    ----> *(++ip)  ------> 20  AND ip ----> 20


-------------------------------------------------------------
Comma operator

           2 , 3
           -----
             3

           2,3,4
           -----
             4


       2, 3, 4, 5 
      ------------
          5

        x, y, x + y 
        -----------
           x + y 
int i ; 

     i =   2, 3, 4, 5 ;
          ------------
                5

    resulution as ',' is at lower level than '=' 
     (i =   2) , 3, 4, 5 
     -----------------------
                 5

     i =  ( 2, 3, 4, 5 ) ; 
          ------------
                5


     i =         5 
          ------------
                5

     ( i =   2, 3, 4, 5 ) ; 
      ---------------------
                5

    f(10,20,30); 
	printf("%d", 2,3,4,5); 
	printf("%d", (2+3+4+5)     ); 
	printf("%d", (2,3,4,5)     ); 
	printf("%d", (2,3,4) , 5     ); 
	printf("%d%d", (2,3,4) , 5     ); 

              (2,3,4,5) 
                   5 
           f(     (2,3,4,5)    ) ; 
                       5


         sizeof(3,4.5);


 x = 3,4;
  x==3
  x = (3,4);
       4
 x==4

 y = ( x=3,4);
 y = (4,x=3);
 x=3,y=4,x+y;

-----------------------------------------------------------






















































char *cp1,   * cp = "hello world" ; 

cp1 = cp + 4 

   cp1[2] ---->  w
   cp1[-1] --->  l  
   cp1[-3] --->  e  
-----------------------------------------------------------

"hello"   +  2 ----> char ptr   to the letter l 

"hello" [2]    ---->     =   * ( "hello" + 2 ) 

                           ==       'l'

3["hello"]     ---->    second l

---------------------------------------------------------------














